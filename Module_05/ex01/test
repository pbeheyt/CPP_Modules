/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Bureaucrat.cpp                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pbeheyt <pbeheyt@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/25 07:01:14 by pbeheyt           #+#    #+#             */
/*   Updated: 2023/05/25 09:19:37 by pbeheyt          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Bureaucrat.hpp"

Bureaucrat::Bureaucrat(void) : _name("Unnamed"), _grade(150) {}

Bureaucrat::Bureaucrat(std::string const name, int grade) : _name(name) {
	if (grade > 150) {
		throw Bureaucrat::GradeTooLowException();
	} else if (grade < 1) {
		throw Bureaucrat::GradeTooHighException();
	} else {
		this->_grade = grade;
	}
}

Bureaucrat::Bureaucrat(Bureaucrat const &rhs) :
	_name(rhs._name), _grade(rhs._grade) {}

Bureaucrat &Bureaucrat::operator=(Bureaucrat const &rhs) {
	if (this != &rhs) {
		this->_grade = rhs._grade;
	}
	return *this;
}

Bureaucrat::~Bureaucrat(void) {}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

std::string const	&Bureaucrat::getName(void) const {
	return this->_name;
}

int	Bureaucrat::getGrade(void) const {
	return this->_grade;
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

void	Bureaucrat::incrementGrade(void) {
	if (this->_grade <= 1) {
		throw Bureaucrat::GradeTooHighException();
	} else {
		this->_grade--;
	}
}

void	Bureaucrat::decrementGrade(void) {
	if (this->_grade >= 150) {
		throw Bureaucrat::GradeTooLowException();
	} else {
		this->_grade++;
	}
}

void	Bureaucrat::signForm(Form &form) const {
	try {
		form.beSigned(*this);
		std::cout << *this << " signed " << form << std::endl;
	}
	catch(const std::exception& e) {
		std::cerr << *this << " couldnâ€™t sign " << form << " because " << e.what() << std::endl;
	}
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

std::ostream &operator<<(std::ostream &ofs, Bureaucrat const &rhs) {
	ofs << rhs.getName() << ", bureaucrat grade " << rhs.getGrade();
	return ofs;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Bureaucrat.hpp                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pbeheyt <pbeheyt@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/25 07:01:11 by pbeheyt           #+#    #+#             */
/*   Updated: 2023/05/25 09:18:59 by pbeheyt          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef MODULE_05_EX01_BUREAUCRATE_HPP_
#define MODULE_05_EX01_BUREAUCRATE_HPP_

#include <iostream>
#include "Form.hpp";

class Bureaucrat {
	public:
		Bureaucrat(void);
		Bureaucrat(std::string const name, int grade);
		Bureaucrat(Bureaucrat const &rhs);
		Bureaucrat &operator=(Bureaucrat const &rhs);
		~Bureaucrat(void);

		std::string const	&getName(void) const;
		int					getGrade(void) const;
		
		void	incrementGrade(void);
		void	decrementGrade(void);
		void	signForm(Form &form) const;

		class GradeTooHighException : public std::exception {
			public:
				char const *what() const throw() {
					return ("Grade too high");
				}
		};

		class GradeTooLowException : public std::exception {
			public:
				char const *what() const throw() {
					return ("Grade too low");
				}
		};

	private:
		std::string const	_name;
		int					_grade;
};

std::ostream &operator<<(std::ostream &ofs, Bureaucrat const &rhs);

#endif // MODULE_05_EX01_BUREAUCRATE_HPP_/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Form.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pbeheyt <pbeheyt@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/25 07:01:14 by pbeheyt           #+#    #+#             */
/*   Updated: 2023/05/25 09:21:49 by pbeheyt          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Form.hpp"

Form::Form(void) : _name("Form"), _isSigned(false), _gradeSign (1), _gradeExe (1) {}

Form::Form(std::string const &name, int const gradeSign, int const gradeExe) :
	_name(name), _isSigned(false), _gradeSign(gradeSign), _gradeExe(gradeExe) {
	if (gradeSign < 1 || gradeExe < 1)
		throw Form::GradeTooHighException();
	else if (gradeSign > 150 || gradeExe > 150)
		throw Form::GradeTooLowException();
}

Form::Form(Form const &rhs) :
	_name(rhs._name), _isSigned(false), _gradeSign (rhs._gradeSign), 
	_gradeExe (rhs._gradeExe) {}

Form &Form::operator=(Form const &rhs) {
	if (this != &rhs) {}
	return *this;
}

Form::~Form(void) {}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

std::string const	&Form::getName(void) const {
	return this->_name;
}

bool				Form::IsSigned(void) const {
	return this->_isSigned;
}

int					Form::getGradeSign(void) const {
	return this->_gradeSign;
}

int					Form::getGradeExe(void) const {
	return this->_gradeExe;
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

void	Form::beSigned(Bureaucrat const &bureaucrat) {
	if (this->IsSigned() == false) {
		throw Form::GradeTooLowException();
	}
	if (bureaucrat.getGrade() <= this->getGradeSign()) {
		this->_isSigned = true;
	} else {
		throw Form::GradeTooLowException();
	}
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

std::ostream &operator<<(std::ostream &ofs, Form const &rhs) {
	ofs	<< "Form [" << rhs.getName() << "] " 
		<< "has a required grade of " << rhs.getGradeSign() << "to sign a form and "
		<< rhs.getGradeExe() << "to execute it."
		<< "It is " << (rhs.IsSigned() ? "signed." : "not signed.") << std::endl;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Form.hpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pbeheyt <pbeheyt@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/25 07:01:11 by pbeheyt           #+#    #+#             */
/*   Updated: 2023/05/25 09:21:10 by pbeheyt          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef MODULE_05_EX01_FORM_HPP_
#define MODULE_05_EX01_FORM_HPP_

#include "Bureaucrat.hpp"

class Form {
	public:
		Form(void);
		Form::Form(std::string const &name, int const gradeSign, int const gradeExe);
		Form(Form const &rhs);
		Form &operator=(Form const &rhs);
		~Form(void);

		std::string const	&getName(void) const;
		bool				IsSigned(void) const;
		int					getGradeSign(void) const;
		int					getGradeExe(void) const;

		void	beSigned(Bureaucrat const &bureaucrat);
		void	signForm(void);

		class GradeTooHighException : public std::exception {
			public:
				char const *what() const throw() {
					return ("Grade too high");
				}
		};

		class GradeTooLowException : public std::exception {
			public:
				char const *what() const throw() {
					return ("Grade too low");
				}
		};

		class FormAlreadySigned : public std::exception {
			public:
				char const *what() const throw() {
					return ("Form is already signed");
				}
		};

	private:
		std::string const	_name;
		bool				_isSigned;
		int	const			_gradeSign;
		int	const			_gradeExe;
};

std::ostream &operator<<(std::ostream &ofs, Form const &rhs);

#endif // MODULE_05_EX01_FORM_HPP_